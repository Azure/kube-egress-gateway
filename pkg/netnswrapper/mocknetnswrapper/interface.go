// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/netnswrapper/netns.go

// Package mocknetnswrapper is a generated GoMock package.
package mocknetnswrapper

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	netns "github.com/vishvananda/netns"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DeleteNamed mocks base method.
func (m *MockInterface) DeleteNamed(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamed", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamed indicates an expected call of DeleteNamed.
func (mr *MockInterfaceMockRecorder) DeleteNamed(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamed", reflect.TypeOf((*MockInterface)(nil).DeleteNamed), name)
}

// Get mocks base method.
func (m *MockInterface) Get() (netns.NsHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(netns.NsHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get))
}

// GetFromName mocks base method.
func (m *MockInterface) GetFromName(name string) (netns.NsHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromName", name)
	ret0, _ := ret[0].(netns.NsHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromName indicates an expected call of GetFromName.
func (mr *MockInterfaceMockRecorder) GetFromName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromName", reflect.TypeOf((*MockInterface)(nil).GetFromName), name)
}

// NewNamed mocks base method.
func (m *MockInterface) NewNamed(name string) (netns.NsHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNamed", name)
	ret0, _ := ret[0].(netns.NsHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamed indicates an expected call of NewNamed.
func (mr *MockInterfaceMockRecorder) NewNamed(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamed", reflect.TypeOf((*MockInterface)(nil).NewNamed), name)
}

// Set mocks base method.
func (m *MockInterface) Set(ns netns.NsHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockInterfaceMockRecorder) Set(ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockInterface)(nil).Set), ns)
}
