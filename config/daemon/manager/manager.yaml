apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: daemon-manager
  namespace: system
  labels:
    control-plane: daemon-manager
spec:
  selector:
    matchLabels:
      control-plane: daemon-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: daemon
      labels:
        control-plane: daemon-manager
    spec:
      # securityContext:
      #   runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      hostPID: true
      hostNetwork: true
      nodeSelector:
        todo.kubernetes.azure.com/mode: "Gateway"
      tolerations:
      - key: mode
        operator: "Equal"
        value: "gateway"
        effect: "NoSchedule"
      containers:
      - command:
        - /kube-egress-gateway-daemon
        image: daemon:latest
        name: daemon
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /proc
          name: hostpath-proc
          mountPropagation: Bidirectional
        - mountPath: /run
          name: hostpath-run
          mountPropagation: Bidirectional
        - mountPath: /var
          name: hostpath-var
          mountPropagation: Bidirectional
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      serviceAccountName: daemon-manager
      terminationGracePeriodSeconds: 10
      volumes:
        - name: hostpath-proc
          hostPath:
              path: /proc
        - name: hostpath-run
          hostPath:
              path: /run
        - name: hostpath-var
          hostPath:
              path: /var
