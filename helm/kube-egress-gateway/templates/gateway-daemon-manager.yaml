{{- if .Values.gatewayDaemonManager.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-egress-gateway-daemon-manager
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-egress-gateway-daemon-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - egressgateway.kubernetes.azure.com
  resources:
  - gatewaystatuses
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - egressgateway.kubernetes.azure.com
  resources:
  - gatewayvmconfigurations
  - podendpoints
  - staticgatewayconfigurations
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - egressgateway.kubernetes.azure.com
  resources:
  - gatewayvmconfigurations/status
  verbs:
  - get
- apiGroups:
  - egressgateway.kubernetes.azure.com
  resources:
  - podendpoints/status
  - staticgatewayconfigurations/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kube-egress-gateway-daemon-manager-role
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-egress-gateway-daemon-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-egress-gateway-daemon-manager-role
subjects:
- kind: ServiceAccount
  name: kube-egress-gateway-daemon-manager
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kube-egress-gateway-daemon-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kube-egress-gateway-daemon-manager-role
subjects:
- kind: ServiceAccount
  name: kube-egress-gateway-daemon-manager
  namespace: {{ .Release.Namespace }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    kube-egress-gateway-control-plane: daemon-manager
  name: kube-egress-gateway-daemon-manager
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      kube-egress-gateway-control-plane: daemon-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: daemon
      labels:
        kube-egress-gateway-control-plane: daemon-manager
    spec:
      initContainers:
      - image: {{ template "image.gatewayDaemonManagerInit" . }}
        imagePullPolicy: {{ .Values.gatewayDaemonManagerInit.imagePullPolicy }}
        name: ip-netns-add
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/run/netns
          name: hostpath-var
          mountPropagation: Bidirectional
      containers:
      - args:
        - --metrics-bind-port={{ .Values.gatewayDaemonManager.metricsBindPort }}
        - --health-probe-bind-port={{ .Values.gatewayDaemonManager.healthProbeBindPort }}
        - --gateway-lb-probe-port={{ .Values.common.gatewayLbProbePort }}
        - --secret-namespace={{ .Release.Namespace }}
        command:
        - /kube-egress-gateway-daemon
        env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: {{ template "image.gatewayDaemonManager" . }}
        imagePullPolicy: {{ .Values.gatewayDaemonManager.imagePullPolicy }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.gatewayDaemonManager.healthProbeBindPort }}
          initialDelaySeconds: 15
          periodSeconds: 20
        name: daemon
        readinessProbe:
          httpGet:
            path: /readyz
            port: {{ .Values.gatewayDaemonManager.healthProbeBindPort }}
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
            add: ["NET_ADMIN", "NET_RAW", "SYS_ADMIN"]
        volumeMounts:
        - mountPath: /var/run/netns
          mountPropagation: HostToContainer
          name: hostpath-var
        - mountPath: /run/xtables.lock
          name: iptableslock
      hostNetwork: true
      nodeSelector:
        kubeegressgateway.azure.com/mode: "true"
      serviceAccountName: kube-egress-gateway-daemon-manager
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: kubeegressgateway.azure.com/mode
        operator: Equal
        value: "true"
      volumes:
      - hostPath:
          path: /var/run/netns
        name: hostpath-var
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: iptableslock
{{- end }}
